from discord.ext import commands
from datetime import datetime
import discord
import os

class Info(commands.Cog):
    def __init__(self, client):
        self.client = client

    @commands.command(name="userinfo", aliases=["memberinfo", "ui", "mi"])
    @commands.guild_only()
    @commands.is_owner()
    async def user_info(self, ctx):
        await ctx.send('Hoorah!')

    @commands.command(name="serverinfo", aliases=["guildinfo", "si", "gi"])
    @commands.guild_only()
    @commands.is_owner()
    async def server_info(self, ctx):
        embed = discord.Embed(
            title="Server Information",
            colour = ctx.guild.owner.colour,
            timestamp = datetime.utcnow()
        )

        statuses = {
            "online": len(list(filter(lambda m: str(m.status) == "online", ctx.guild.members))),
            "idle": len(list(filter(lambda m: str(m.status) == "idle", ctx.guild.members))),
            "dnd": len(list(filter(lambda m: str(m.status) == "dnd", ctx.guild.members))),
            "offline": len(list(filter(lambda m: str(m.status) == "offline", ctx.guild.members))),
        }

        fields = [
            ("ID", ctx.guild.id, True),
            ("Name", ctx.guild.name, True),
            ("Region", ctx.guild.region, True),
            ("Owner", ctx.guild.owner, True),
            ("Created At", ctx.guild.created_at.strftime("%Y-%m-%d %H:%M:%S"), True),
            ("Members", len(ctx.guild.members), True),
            ("Banned Members", len(await ctx.guild.bans()), True),
            ("Statuses", f":green_circle: {statuses['online']} :orange_circle: {statuses['idle']} :red_circle: {statuses['dnd']} :black_circle: {statuses['offline']} ", True),
            ("Categories", len(ctx.guild.categories), True),
            ("Text Channels", len(ctx.guild.text_channels), True),
            ("Voice Channels", len(ctx.guild.voice_channels), True),
            ("Roles", len(ctx.guild.roles), True),
            ("Invites", len(await ctx.guild.invites()), True),
        ]

        for name, value, inline in fields:
            embed.add_field(name=name, value=value, inline=inline)

        embed.set_footer(text=f"Generated by {ctx.author.display_name}")

        await ctx.send(embed=embed)

def setup(client):
    client.add_cog(Info(client))
