from discord.ext import commands, tasks
from lib.mysql import mysql
from datetime import datetime
import discord
import json
import requests

class ShinyEmbed(commands.Cog):
    def __init__(self, client):
        self.client = client

    @commands.command()
    async def shiny(self, ctx, *, input):
        results = self.get_pokemon_info(input)
        if len(results) > 1:
            #TODO make a selection for people to choose which one they mean
            for result in results:
                image = self.generate_image_link(result)
                embed = self.generate_embed(ctx, image, result)
                await ctx.send(embed=embed)
        else:
            image = self.generate_image_link(results[0])
            embed = self.generate_embed(ctx, image, results[0])
            await ctx.send(embed=embed)
        # await ctx.send(embed=self.post_images())

    @commands.command()
    async def normal(self, ctx, *, input):
        results = self.get_pokemon_info(input)
        if len(results) > 1:
            #TODO make a selection for people to choose which one they mean
            for result in results:
                image = self.generate_image_link(result, False)
                embed = self.generate_embed(ctx, image, result)
                await ctx.send(embed=embed)
        else:
            print(results)
            image = self.generate_image_link(results[0], False)
            embed = self.generate_embed(ctx, image, results[0])
            await ctx.send(embed=embed)
        # await ctx.send(embed=self.post_images())

    def get_pokemon_info(self, input):
        db = mysql()
        query = """
            SELECT
                dex,
                name_en,
                type,
                shiny_released,
                released_date,
                fn,
                isotope
            FROM shiny_list
            WHERE (
                dex = %s OR
                LOWER(name_de) = LOWER(%s) OR
                LOWER(name_en) = LOWER(%s) OR
                LOWER(name_fr) = LOWER(%s) OR
                LOWER(name_ja) = LOWER(%s) OR
                LOWER(name_kr) = LOWER(%s) OR
                LOWER(name_zh) = LOWER(%s)
            )
        """
        db.execute(query, [input, input, input, input, input, input, input])
        results = db.fetchall()
        db.close()

        return results

    def generate_image_link(self, result, shiny = True):
        cache_link = "https://images.weserv.nl/?w=200&trim=10&url="
        base_url = "https://raw.githubusercontent.com/ZeChrales/PogoAssets/master/pokemon_icons/"
        url = ""
        # fn
        if result[5] == None: # If no specific file name is given
            dex = str(result[0]).zfill(3)
            if shiny:
                # base_url + pokemon_icon_{dex}{type}{isotope or ''}_shiny.png
                url = base_url + f"pokemon_icon_{dex}{result[2]}{result[6] or ''}_shiny.png"
                pass
            else:
                # base_url + pokemon_icon_{dex}{type}{isotope or ''}
                url = base_url + f"pokemon_icon_{dex}{result[2]}{result[6] or ''}.png"
        else:
            if shiny:
                # base_url + pokemon_icon_{fn}_shiny.png
                url = base_url + f"pokemon_icon_{result[5]}_shiny.png"
                pass
            else:
                # base_url + pokemon_icon_{fn}.png
                url = base_url + f"pokemon_icon_{result[5]}.png"

        return cache_link + url

    def generate_embed(self, ctx, image, result):
        # Cherubi green: 0x2FA439
        # Cherubi pink: 0xE66479
        embed = discord.Embed(
            title = f"Shiny {result[1]}",
            description = f"National Dex #{result[0]}",
            colour = 0x2FA439,
            timestamp=datetime.utcnow()
        )

        embed.set_author(name="Shiny Checker", icon_url="https://images.weserv.nl/?trim=10&url=https://raw.githubusercontent.com/ZeChrales/PogoAssets/master/pokemon_icons/pokemon_icon_420_00.png")
        embed.set_thumbnail(url=image)

        embed.add_field(name="Released?", value=bool(result[3]), inline=True)

        if result[4]:
            embed.add_field(name="Date Released:", value=result[4], inline=True)

        embed.set_footer(text=f"Generated by {ctx.author.display_name}")

        return embed

def setup(client):
    client.add_cog(ShinyEmbed(client))
